name: Build Full Flutter APK from Scratch

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4  # 更新到最新稳定版本

      # 2. 设置 Java 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v4  # 更新到最新稳定版本
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. 设置 Flutter 环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      # 4. 创建 Flutter 项目
      - name: Create Flutter Project
        run: |
          flutter create image_crawler
          cd image_crawler

      # 5. 写入 pubspec.yaml
      - name: Write pubspec.yaml
        run: |
          cat > image_crawler/pubspec.yaml << 'EOF'
          name: image_crawler
          description: A Flutter image crawler app
          version: 1.0.0+1
          environment:
            sdk: ">=2.18.0 <3.0.0"
          dependencies:
            flutter:
              sdk: flutter
            http: ^1.1.0
            html: ^0.15.0
            image: ^4.0.0
            path_provider: ^2.0.0
            permission_handler: ^10.0.0
            file_picker: ^5.0.0
          dev_dependencies:
            flutter_test:
              sdk: flutter
          flutter:
            uses-material-design: true
          EOF

      # 6. 写入 main.dart（简化版以适应日志）
      - name: Write main.dart
        run: |
          cat > image_crawler/lib/main.dart << 'EOF'
          import 'package:flutter/material.dart';
          import 'image_crawler.dart';

          void main() => runApp(const MyApp());

          class MyApp extends StatelessWidget {
            const MyApp({super.key});
            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                theme: ThemeData(useMaterial3: true, colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple)),
                home: const CrawlerScreen(),
              );
            }
          }

          class CrawlerScreen extends StatefulWidget {
            const CrawlerScreen({super.key});
            @override
            _CrawlerScreenState createState() => _CrawlerScreenState();
          }

          class _CrawlerScreenState extends State<CrawlerScreen> {
            final _urlController = TextEditingController();
            final _crawler = ImageCrawler();
            bool _isCrawling = false;

            @override
            void initState() {
              super.initState();
              _crawler.init();
            }

            void _startCrawling() async {
              setState(() => _isCrawling = true);
              await _crawler.crawl(_urlController.text, [], 1, 0, 0, print);
              setState(() => _isCrawling = false);
            }

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                body: Container(
                  decoration: const BoxDecoration(gradient: LinearGradient(colors: [Colors.deepPurple, Colors.purpleAccent], begin: Alignment.topLeft, end: Alignment.bottomRight)),
                  child: SafeArea(
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Column(
                        children: [
                          const Text('图片爬虫', style: TextStyle(fontSize: 32, color: Colors.white, fontWeight: FontWeight.bold)),
                          TextField(controller: _urlController, decoration: const InputDecoration(labelText: '目标网站 URL', border: OutlineInputBorder(), prefixIcon: Icon(Icons.link))),
                          const SizedBox(height: 20),
                          ElevatedButton(
                            onPressed: _isCrawling ? null : _startCrawling,
                            child: Text(_isCrawling ? '爬取中...' : '开始爬取'),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            }
          }
          EOF

      # 7. 写入 image_crawler.dart
      - name: Write image_crawler.dart
        run: |
          cat > image_crawler/lib/image_crawler.dart << 'EOF'
          import 'dart:io';
          import 'package:http/http.dart' as http;
          import 'package:html/parser.dart';
          import 'package:image/image.dart' as img;

          class ImageCrawler {
            final Set<String> downloadedUrls = {};
            int downloadedCount = 0;
            late Directory saveDir;

            Future<void> init() async {
              saveDir = Directory('/storage/emulated/0/Pictures/爬虫');
              saveDir.createSync(recursive: true);
            }

            Future<void> crawl(String url, List<String> whitelist, int namingMode, int minWidth, int minHeight, Function(String) onProgress) async {
              final client = http.Client();
              try {
                final response = await client.get(Uri.parse(url));
                final document = parse(response.body);
                for (var img in document.getElementsByTagName('img')) {
                  final src = img.attributes['src'];
                  if (src != null) {
                    final imgUrl = Uri.parse(url).resolve(src).toString();
                    onProgress('下载: $imgUrl');
                    final response = await client.get(Uri.parse(imgUrl));
                    final image = img.decodeImage(response.bodyBytes);
                    if (image != null) {
                      final savePath = '$saveDir/${image.width}x${image.height}';
                      Directory(savePath).createSync(recursive: true);
                      final file = File('$savePath/${Uri.parse(imgUrl).pathSegments.last}');
                      file.writeAsBytesSync(response.bodyBytes);
                      downloadedCount++;
                      onProgress('已保存: ${file.path}');
                    }
                  }
                }
              } finally {
                client.close();
              }
            }
          }
          EOF

      # 8. 配置 Android 权限
      - name: Configure Android Manifest
        run: |
          cat > image_crawler/android/app/src/main/AndroidManifest.xml << 'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <uses-permission android:name="android.permission.INTERNET"/>
              <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
              <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
              <application
                  android:label="Image Crawler"
                  android:icon="@mipmap/ic_launcher">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTop"
                      android:theme="@style/LaunchTheme"
                      android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
                      android:hardwareAccelerated="true"
                      android:windowSoftInputMode="adjustResize">
                      <meta-data
                          android:name="io.flutter.embedding.android.NormalTheme"
                          android:resource="@style/NormalTheme"/>
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
                  <meta-data
                      android:name="flutterEmbedding"
                      android:value="2"/>
              </application>
          </manifest>
          EOF

      # 9. 获取依赖
      - name: Get dependencies
        run: |
          cd image_crawler
          flutter pub get

      # 10. 构建 APK
      - name: Build APK
        run: |
          cd image_crawler
          flutter build apk --release

      # 11. 上传 APK
      - name: Upload APK
        uses: actions/upload-artifact@v4  # 更新到最新稳定版本
        with:
          name: app-release
          path: image_crawler/build/app/outputs/flutter-apk/app-release.apk