name: Build Git for Android 9 with Termux and NDK

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-git:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 安装 Android NDK
      - name: Install Android NDK
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r26b-linux.zip
          unzip -q android-ndk-r26b-linux.zip -d /opt
          echo "ANDROID_NDK_HOME=/opt/android-ndk-r26b" >> $GITHUB_ENV
          echo "/opt/android-ndk-r26b/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      # 3. 安装编译工具和依赖
      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            clang \
            make \
            pkg-config \
            zlib1g-dev \
            autoconf \
            gettext \
            libcurl4-openssl-dev

      # 4. 交叉编译 libiconv
      - name: Build libiconv for Android
        run: |
          wget -q https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.18.tar.gz
          tar -xzf libiconv-1.18.tar.gz
          cd libiconv-1.18
          export CC=aarch64-linux-android28-clang
          export CXX=aarch64-linux-android28-clang++
          export CFLAGS="-fPIC"
          export LDFLAGS="-static"
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/opt/libiconv \
            --disable-shared \
            --enable-static
          make -j$(nproc)
          make install
          echo "LIBICONV_HOME=/opt/libiconv" >> $GITHUB_ENV

      # 5. 克隆 Git 源码
      - name: Clone Git source
        run: |
          git clone --depth 1 --branch v2.46.0 https://github.com/git/git.git
          cd git
          git submodule update --init --recursive

      # 6. 应用 Termux 补丁（可选）
      - name: Apply Termux patches
        run: |
          echo "Skipping patches. Uncomment below to apply Termux patches if needed."
          # cd git
          # wget -q https://raw.githubusercontent.com/termux/termux-packages/master/packages/git/fix-some-issue.patch
          # git apply fix-some-issue.patch

      # 7. 配置并编译 Git (修复后的版本)
      - name: Configure and build Git
        run: |
          cd git
          export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          export CC=aarch64-linux-android28-clang
          export CXX=aarch64-linux-android28-clang++
          export CFLAGS="-DNO_CURL -DNO_EXPAT -DNO_TCLTK -I${LIBICONV_HOME}/include"
          export LDFLAGS="-static -L${LIBICONV_HOME}/lib"
          
          # 彻底禁用所有运行时测试
          export ac_cv_func_iconv=yes
          export ac_cv_iconv_omit_bom=yes
          export ac_cv_iconv_utf_bom=no
          export ac_cv_iconv_utf16_bom=no
          export ac_cv_iconv_utf32_bom=no
          export ac_cv_iconv_works=yes
          export ac_cv_func_gettext=no
          export ac_cv_lib_intl_gettext=no
          export ac_cv_header_libintl_h=no
          export cross_compiling=yes
          
          # 创建伪造的测试程序返回值
          echo "#!/bin/sh" > test-program
          echo "exit 0" >> test-program
          chmod +x test-program
          export PATH=$(pwd):$PATH

          make configure
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/data/data/com.termux/files/usr \
            --with-libiconv-prefix=${LIBICONV_HOME} \
            --without-libintl \
            --without-curl \
            --without-expat \
            --without-tcltk \
            --with-openssl \
            --with-zlib \
            --disable-rpath

          make -j$(nproc) NO_MSGFMT=1 NO_GETTEXT=1

      # 8. 打包二进制
      - name: Package binary
        run: |
          cd git
          mkdir -p /tmp/git-install/data/data/com.termux/files/usr
          make install DESTDIR=/tmp/git-install NO_MSGFMT=1 NO_GETTEXT=1
          strip /tmp/git-install/data/data/com.termux/files/usr/bin/git
          tar -czf git-termux.tar.gz -C /tmp/git-install .
          cp /tmp/git-install/data/data/com.termux/files/usr/bin/git git-binary

      # 9. 上传产物
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: git-termux
          path: |
            git/git-termux.tar.gz
            git/git-binary
