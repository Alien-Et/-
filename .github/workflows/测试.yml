name: 构建 Python 并打包为 tar.gz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 检出 Termux 官方仓库
      - name: 检出 termux-packages 仓库
        uses: actions/checkout@v4
        with:
          repository: termux/termux-packages
          ref: master

      # 安装系统依赖并设置 Termux 构建环境
      - name: 设置 Termux 构建环境
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl git build-essential
          ./scripts/setup-ubuntu.sh
          ./scripts/setup-android-sdk.sh

      # 创建临时安装目录
      - name: 创建临时安装目录
        run: |
          mkdir -p $HOME/staging/data/python

      # 修改所有相关包的 build.sh 脚本
      - name: 修改构建脚本中的安装路径
        run: |
          set -x
          # 更新依赖列表，移除可能已废弃的 libandroid-support
          for pkg in bzip2 libbz2 libcrypt libffi liblzma libuuid ncurses openssl readline sqlite zlib python; do
            if [ -f "packages/$pkg/build.sh" ]; then
              sed -i 's#--prefix=$TERMUX_PREFIX#--prefix=/data/python#g' packages/$pkg/build.sh
              sed -i 's#-I$TERMUX_PREFIX/include#-I/data/python/include#g' packages/$pkg/build.sh
              sed -i 's#-L$TERMUX_PREFIX/lib#-L/data/python/lib#g' packages/$pkg/build.sh
              sed -i 's#--with-openssl=$TERMUX_PREFIX#--with-openssl=/data/python#g' packages/$pkg/build.sh
              echo "已修改 packages/$pkg/build.sh"
              cat packages/$pkg/build.sh
            else
              echo "警告: packages/$pkg/build.sh 不存在，跳过"
            fi
          done

      # 构建并安装依赖
      - name: 构建并安装依赖
        run: |
          set -x
          for pkg in bzip2 libbz2 libcrypt libffi liblzma libuuid ncurses openssl readline sqlite zlib; do
            if [ -d "packages/$pkg" ]; then
              TERMUX_PREFIX=$HOME/staging/data/python ./build-package.sh -i $pkg
              echo "检查 $pkg 安装情况:"
              ls -l $HOME/staging/data/python || true
            else
              echo "错误: 包 $pkg 不存在"
              exit 1
            fi
          done

      # 构建并安装 Python
      - name: 构建并安装 Python
        run: |
          set -x
          TERMUX_PREFIX=$HOME/staging/data/python ./build-package.sh -i python
          echo "检查 Python 安装情况:"
          ls -l $HOME/staging/data/python/bin || true
          if [ -f "$HOME/staging/data/python/bin/python3" ]; then
            echo "Python 可执行文件存在"
            $HOME/staging/data/python/bin/python3 --version
          else
            echo "错误: Python 未正确安装"
            exit 1
          fi

      # 创建 tar.gz 归档
      - name: 创建 tar.gz 归档
        run: |
          set -x
          # 提取 Python 版本
          PYTHON_VERSION=$(grep '^TERMUX_PKG_VERSION=' packages/python/build.sh | cut -d= -f2 | tr -d '"' | head -n 1)
          echo "Python 版本: $PYTHON_VERSION"
          # 验证安装目录
          if [ -d "$HOME/staging/data/python/bin" ]; then
            echo "安装目录内容:"
            ls -lR $HOME/staging/data/python
          else
            echo "错误: $HOME/staging/data/python 未正确填充"
            exit 1
          fi
          # 创建归档
          cd $HOME/staging
          tar -czpf python-${PYTHON_VERSION}.tar.gz --preserve-permissions --no-acls --no-xattrs data/python || {
            echo "错误: tar 归档失败"
            exit 1
          }
          # 确保 artifacts 目录存在
          mkdir -p artifacts
          mv python-${PYTHON_VERSION}.tar.gz artifacts/ || {
            echo "错误: 移动 tar.gz 文件失败"
            exit 1
          }
          # 验证归档文件
          ls -lh artifacts/
          if [ -f "artifacts/python-${PYTHON_VERSION}.tar.gz" ]; then
            echo "归档文件创建成功: artifacts/python-${PYTHON_VERSION}.tar.gz"
          else
            echo "错误: 归档文件未找到"
            exit 1
          fi

      # 上传归档文件
      - name: 上传 tar.gz 文件
        uses: actions/upload-artifact@v4
        with:
          name: python-tar
          path: artifacts/
          if-no-files-found: error