name: Python Android ARM64 Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12.8"
  ANDROID_NDK_VERSION: "27.2.12479018"
  INSTALL_PREFIX: "/data/python"

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 90

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            zlib1g-dev \
            libffi-dev \
            libssl-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            wget \
            curl \
            llvm \
            libncurses5-dev \
            libncursesw5-dev \
            xz-utils \
            tk-dev \
            libxml2-dev \
            libxmlsec1-dev \
            liblzma-dev \
            git \
            tar \
            python3 \
            python3-pip \
            unzip \
            binutils \
            tree \
            pkg-config \
            autoconf \
            automake \
            libtool \
            ninja-build \
            cmake

      - name: 设置 Android NDK
        uses: android-actions/setup-android@v2
        with:
          ndk-version: "${{ env.ANDROID_NDK_VERSION }}"

      - name: 配置编译环境
        run: |
          echo "NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "TOOLCHAIN=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV
          echo "SYSROOT=$TOOLCHAIN/sysroot" >> $GITHUB_ENV
          echo "TARGET=aarch64-linux-android" >> $GITHUB_ENV
          echo "API_LEVEL=21" >> $GITHUB_ENV
          echo "CC=$TOOLCHAIN/bin/${TARGET}${API_LEVEL}-clang" >> $GITHUB_ENV
          echo "CXX=$TOOLCHAIN/bin/${TARGET}${API_LEVEL}-clang++" >> $GITHUB_ENV
          echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
          echo "RANLIB=$TOOLCHAIN/bin/llvm-ranlib" >> $GITHUB_ENV
          echo "READELF=$(which readelf)" >> $GITHUB_ENV
          echo "CFLAGS=--sysroot=$SYSROOT -DANDROID -fPIC" >> $GITHUB_ENV
          echo "LDFLAGS=--sysroot=$SYSROOT -fuse-ld=lld" >> $GITHUB_ENV

      - name: 下载 Python 源码
        run: |
          wget https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/Python-${{ env.PYTHON_VERSION }}.tar.xz
          tar -xf Python-${{ env.PYTHON_VERSION }}.tar.xz
          mv Python-${{ env.PYTHON_VERSION }} cpython

      - name: 预处理 Python 源码
        run: |
          cd cpython
          
          # 彻底移除不兼容模块
          rm -f Modules/{grp,pwd,spwd}module.c
          
          # 修改构建配置
          sed -i '/^\(grp\|pwd\|spwd\)/d' Modules/Setup
          [ -f Modules/Setup.local ] && sed -i '/^\(grp\|pwd\|spwd\)/d' Modules/Setup.local
          sed -i '/GRP_OBJS/d' Makefile.pre.in
          
          # 创建 Android 专用配置
          cat <<EOF > config.site
          ac_cv_file__dev_ptmx=yes
          ac_cv_file__dev_ptc=no
          ac_cv_func_getgrent=no
          ac_cv_func_setgrent=no
          ac_cv_func_endgrent=no
          ac_cv_func_getpwent=no
          ac_cv_func_setpwent=no
          ac_cv_func_endpwent=no
          ac_cv_func_getgrgid_r=no
          ac_cv_func_getgrnam_r=no
          EOF
          
          # 验证修改
          ! grep -r "grpmodule" . || (echo "发现残留的grpmodule引用" && exit 1)

      - name: 构建依赖库
        run: |
          mkdir -p $GITHUB_WORKSPACE/android-vroot/$INSTALL_PREFIX
          export PREFIX=$GITHUB_WORKSPACE/android-vroot/$INSTALL_PREFIX
          
          # 构建 zlib
          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar -xzf zlib-1.3.1.tar.gz
          cd zlib-1.3.1
          CC=$CC AR=$AR RANLIB=$RANLIB \
          ./configure --prefix=$INSTALL_PREFIX --static
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..
          
          # 构建 ncurses
          wget https://ftp.gnu.org/gnu/ncurses/ncurses-6.5.tar.gz
          tar -xzf ncurses-6.5.tar.gz
          cd ncurses-6.5
          CC=$CC AR=$AR RANLIB=$RANLIB \
          ./configure \
            --host=$TARGET \
            --prefix=$INSTALL_PREFIX \
            --disable-shared \
            --enable-static \
            --enable-widec \
            --without-cxx \
            CFLAGS="$CFLAGS" \
            LDFLAGS="$LDFLAGS"
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..
          
          # 构建 readline
          wget https://ftp.gnu.org/gnu/readline/readline-8.2.tar.gz
          tar -xzf readline-8.2.tar.gz
          cd readline-8.2
          CC=$CC AR=$AR RANLIB=$RANLIB \
          ./configure \
            --host=$TARGET \
            --prefix=$INSTALL_PREFIX \
            --disable-shared \
            --enable-static \
            bash_cv_wcwidth_broken=no \
            CFLAGS="$CFLAGS -I$PREFIX/include" \
            LDFLAGS="$LDFLAGS -L$PREFIX/lib -lncursesw"
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..

      - name: 配置 Python
        run: |
          cd cpython
          make distclean || true
          rm -f config.cache
          
          CONFIG_SITE=config.site ./configure \
            --host=$TARGET \
            --build=x86_64-linux-gnu \
            --disable-ipv6 \
            --enable-optimizations \
            --without-ensurepip \
            --with-build-python=$(which python3) \
            CC=$CC \
            CXX=$CXX \
            AR=$AR \
            RANLIB=$RANLIB \
            READELF=$READELF \
            --prefix=$INSTALL_PREFIX \
            CFLAGS="$CFLAGS -I$PREFIX/include" \
            LDFLAGS="$LDFLAGS -L$PREFIX/lib -lreadline -lncursesw -lz -lm -ldl" \
            2>&1 | tee configure.log
          
          # 最终验证
          ! grep "grpmodule" Makefile || (echo "配置失败: grpmodule 仍然存在" && exit 1)

      - name: 构建 Python
        run: |
          cd cpython
          make -j$(nproc) \
            PYTHON_FOR_BUILD=$(which python3) \
            CROSS_COMPILE_TARGET=yes \
            2>&1 | tee build.log
          
          # 检查关键错误
          if grep -q "Error" build.log; then
            grep -A 10 -B 10 "Error" build.log
            exit 1
          fi

      - name: 安装到虚拟文件系统
        run: |
          cd cpython
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          
          # 修复 shebang
          find $GITHUB_WORKSPACE/android-vroot/$INSTALL_PREFIX/bin -type f -exec grep -l '^#!' {} \; | \
            xargs sed -i "1s|.*|#$INSTALL_PREFIX/bin/python3|"
          
          # 验证关键文件
          [ -f $GITHUB_WORKSPACE/android-vroot/$INSTALL_PREFIX/bin/python3 ] || exit 1
          [ -f $GITHUB_WORKSPACE/android-vroot/$INSTALL_PREFIX/lib/libpython3.12.a ] || exit 1

      - name: 打包发布
        run: |
          cd $GITHUB_WORKSPACE/android-vroot
          tar -czvf ../python-${{ env.PYTHON_VERSION }}-android-arm64.tar.gz \
            --transform "s|^data|$INSTALL_PREFIX|" \
            data
          
          echo "打包内容:"
          tar -tvf ../python-${{ env.PYTHON_VERSION }}-android-arm64.tar.gz | head -20

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: python-${{ env.PYTHON_VERSION }}-android-arm64
          path: |
            python-${{ env.PYTHON_VERSION }}-android-arm64.tar.gz
            cpython/build.log
            cpython/configure.log
