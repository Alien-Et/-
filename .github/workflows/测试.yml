name: 测试

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      # 其他步骤（检出代码、安装依赖、设置 NDK、下载 Python 等）保持不变
      # ...

      - name: 清理构建目录
        run: |
          rm -rf $GITHUB_WORKSPACE/android-vroot
          mkdir -p $GITHUB_WORKSPACE/android-vroot/data/python
          echo "构建目录已清理"

      - name: 下载并交叉编译 OpenSSL
        run: |
          wget https://www.openssl.org/source/openssl-3.3.2.tar.gz
          tar -xzf openssl-3.3.2.tar.gz
          cd openssl-3.3.2
          export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT
          export PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          export AR=$AR
          export RANLIB=$RANLIB
          export SYSROOT=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          # 清理环境变量
          unset CFLAGS LDFLAGS CPPFLAGS CXXFLAGS LD_LIBRARY_PATH PERL5LIB
          # 验证环境
          echo "验证环境变量"
          echo "CC=$CC"
          echo "PATH=$PATH"
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME"
          echo "SYSROOT=$SYSROOT"
          echo "CPPFLAGS=$CPPFLAGS"
          $CC --version || { echo "编译器不可用"; exit 1; }
          $CC -v > clang_verbose.log 2>&1
          # 检查 sysroot 宏
          grep -r "_DARWIN_C_SOURCE" $SYSROOT || echo "sysroot 中未找到 _DARWIN_C_SOURCE"
          # 验证 zlib
          echo "检查 zlib 依赖"
          ls -l $ZLIB_INCLUDE/zlib.h || { echo "zlib.h 未找到"; exit 1; }
          ls -l $ZLIB_LIB/libz.a || { echo "libz.a 未找到"; exit 1; }
          # 测试 zlib 链接
          echo "#include <zlib.h>" > test_zlib.c
          echo "int main() { zlibVersion(); return 0; }" >> test_zlib.c
          $CC -I$ZLIB_INCLUDE -L$ZLIB_LIB -lz -o test_zlib test_zlib.c > test_zlib.log 2>&1 || { echo "zlib 链接测试失败"; cat test_zlib.log; exit 1; }
          # 配置 OpenSSL
          timeout 300 ./Configure \
            android-arm64 \
            -D__ANDROID_API__=21 \
            no-shared \
            no-tests \
            --prefix=/data/python \
            --openssldir=/data/python/ssl \
            --with-zlib-include=$ZLIB_INCLUDE \
            --with-zlib-lib=$ZLIB_LIB \
            --sysroot=$SYSROOT \
            -d > configure.log 2>&1 || { echo "Configure 失败"; cat configure.log; exit 1; }
          # 验证 Configure 输出
          grep "Configuring OpenSSL version 3.3.2 for target android-arm64" configure.log || { echo "Configure 未正确运行"; exit 1; }
          # 构建
          make -j$(nproc) > make.log 2>&1 || { echo "make 失败"; cat make.log; exit 1; }
          # 安装
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot > install.log 2>&1 || { echo "make install 失败"; cat install.log; exit 1; }
          # 验证安装
          ls -l $GITHUB_WORKSPACE/android-vroot/data/python/lib/libssl.a || { echo "libssl.a 未找到"; exit 1; }
          ls -l $GITHUB_WORKSPACE/android-vroot/data/python/lib/libcrypto.a || { echo "libcrypto.a 未找到"; exit 1; }
          ls -l $GITHUB_WORKSPACE/android-vroot/data/python/include/openssl/opensslconf.h || { echo "opensslconf.h 未找到"; exit 1; }
          # 测试 OpenSSL 链接
          echo "#include <openssl/ssl.h>" > test_openssl.c
          echo "int main() { SSL_library_init(); return 0; }" >> test_openssl.c
          $CC -I$GITHUB_WORKSPACE/android-vroot/data/python/include -L$GITHUB_WORKSPACE/android-vroot/data/python/lib -lssl -lcrypto -o test_openssl test_openssl.c > test_openssl.log 2>&1 || { echo "OpenSSL 链接测试失败"; cat test_openssl.log; exit 1; }
          cd ..

      # SQLite 构建步骤保持不变
      # ...

      - name: 为 Android 配置 Python
        run: |
          cd cpython
          export CONFIG_SITE=config.site
          export MACHDEP=android
          cat <<EOF > $CONFIG_SITE
          ac_cv_file__dev_ptmx=yes
          ac_cv_file__dev_ptc=no
          ac_cv_func_getgrent=no
          ac_cv_func_setgrent=no
          ac_cv_func_endgrent=no
          ac_cv_func_getpwent=no
          ac_cv_func_setpwent=no
          ac_cv_func_endpwent=no
          ac_cv_func_fork=no
          ac_cv_func_forkpty=no
          ac_cv_func_openpty=no
          ac_cv_func_spawn=no
          ac_cv_func_posix_spawn=no
          ac_cv_func_gethostbyname=no
          ac_cv_func_gethostbyaddr=no
          ac_cv_func_gethostbyname_r=no
          ac_cv_func_nis=no
          ac_cv_func_yp_get_default_domain=no
          ac_cv_func_epoll=no
          ac_cv_func_epoll_create1=no
          ac_cv_func_getservbyname=no
          ac_cv_func_getservbyport=no
          ac_cv_func_getprotobyname=no
          ac_cv_func_sem_clockwait=no
          EOF
          echo "验证 CONFIG_SITE 内容"
          cat $CONFIG_SITE
          export SYSROOT=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          echo "SYSROOT 路径: $SYSROOT"
          if [ -d "$SYSROOT" ]; then
            echo "SYSROOT 路径存在"
            ls -l $SYSROOT/usr/lib/aarch64-linux-android/
            ls -l $SYSROOT/usr/include/
          else
            echo "错误: SYSROOT 路径不存在"
            exit 1
          fi
          echo "检查 OpenSSL 库和头文件"
          ls -l $GITHUB_WORKSPACE/android-vroot/data/python/lib/libssl.a || { echo "libssl.a 未找到"; exit 1; }
          ls -l $GITHUB_WORKSPACE/android-vroot/data/python/lib/libcrypto.a || { echo "libcrypto.a 未找到"; exit 1; }
          ls -l $GITHUB_WORKSPACE/android-vroot/data/python/include/openssl/opensslconf.h || { echo "opensslconf.h 未找到"; exit 1; }
          echo "检查 ncurses 库"
          ls -l $GITHUB_WORKSPACE/android-vroot/data/python/lib/libncursesw.a || { echo "ncurses 库未找到"; exit 1; }
          echo "运行 configure"
          ./configure \
            --host=aarch64-linux-android \
            --build=x86_64-linux-gnu \
            --disable-ipv6 \
            --enable-optimizations \
            --with-build-python=$(which python3) \
            CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang \
            CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++ \
            AR=$AR \
            RANLIB=$RANLIB \
            READELF=$READELF \
            --prefix=/data/python \
            CFLAGS="-I${LZMA_H_PATH} -I$GITHUB_WORKSPACE/android-vroot/data/python/include -I${READLINE_INCLUDE} --sysroot=$SYSROOT -D__ANDROID_API__=21" \
            LDFLAGS="-L${LZMA_LIB_PATH} -L$GITHUB_WORKSPACE/android-vroot/data/python/lib -llzma -lreadline -lncursesw -lbz2 -lffi -lssl -lcrypto -lsqlite3 -lc -lm -ldl --sysroot=$SYSROOT -fuse-ld=lld" \
            2>&1 | tee configure.log || { echo "configure 失败"; cat configure.log; cat config.log; exit 1; }
          echo "检查 configure 日志中 grp 和 pwd 相关配置"
          grep -E "checking for.*(getgrent|setgrent|endgrent|getpwent|setpwent|endpwent)" configure.log || echo "无相关配置日志"
          echo "检查 configure 日志中 SSL 相关配置"
          grep -E "checking for.*(OPENSSL|ssl)" configure.log || echo "无 SSL 相关配置日志"

      - name: 配置 Modules/Setup.local
        run: |
          cd cpython
          cat <<EOF > Modules/Setup.local
          zlib zlibmodule.c -I$GITHUB_WORKSPACE/android-vroot/data/python/include -L$GITHUB_WORKSPACE/android-vroot/data/python/lib -lz
          _ssl _ssl.c -I$GITHUB_WORKSPACE/android-vroot/data/python/include -L$GITHUB_WORKSPACE/android-vroot/data/python/lib -lssl -lcrypto
          _hashlib _hashlib.c -I$GITHUB_WORKSPACE/android-vroot/data/python/include -L$GITHUB_WORKSPACE/android-vroot/data/python/lib -lssl -lcrypto
          _sqlite3 _sqlite3.c -I$GITHUB_WORKSPACE/android-vroot/data/python/include -L$GITHUB_WORKSPACE/android-vroot/data/python/lib -lsqlite3
          _ctypes _ctypes.c -I$GITHUB_WORKSPACE/android-vroot/data/python/include -L$GITHUB_WORKSPACE/android-vroot/data/python/lib -lffi
          EOF
          echo "Modules/Setup.local 已配置，启用 zlib、_ssl、_hashlib、_sqlite3、_ctypes 模块"

      - name: 构建 Python
        run: |
          cd cpython
          make -j$(nproc) > make.log 2>&1 || { echo "make 失败"; cat make.log; cat config.log; exit 1; }
          # 验证 SSL 模块
          grep "_ssl" Modules/Setup.local || { echo "_ssl 模块未配置"; exit 1; }
          ls -l python || { echo "python 可执行文件未生成"; exit 1; }

      # 后续步骤（安装、测试、打包等）保持不变
      # ...

      - name: 上传日志文件
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            cpython/config.log
            cpython/configure.log
            cpython/make.log
            cpython/install.log
            ncurses-6.5/config.log
            ncurses-6.5/configure.log
            ncurses-6.5/make.log
            ncurses-6.5/install.log
            zlib-1.3.1/config.log
            zlib-1.3.1/make.log
            zlib-1.3.1/install.log
            bzip2-1.0.8/make.log
            bzip2-1.0.8/install.log
            libffi-3.4.6/config.log
            libffi-3.4.6/make.log
            libffi-3.4.6/install.log
            xz-5.6.2/config.log
            xz-5.6.2/make.log
            xz-5.6.2/install.log
            readline-8.2/config.log
            readline-8.2/make.log
            readline-8.2/install.log
            openssl-3.3.2/configure.log
            openssl-3.3.2/make.log
            openssl-3.3.2/install.log
            openssl-3.3.2/clang_verbose.log
            openssl-3.3.2/test_zlib.log
            openssl-3.3.2/test_openssl.log
            sqlite-autoconf-3460000/config.log
            sqlite-autoconf-3460000/make.log
            sqlite-autoconf-3460000/install.log