name: Build Python for Android (aarch64) - Final Solution

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            wget curl tar xz-utils unzip \
            git tree python3 python3-pip \
            m4 bison flex texinfo gawk \
            libtool autoconf automake \
            pkg-config gperf file

      - name: Setup Android NDK (r27b)
        uses: android-actions/setup-android@v2
        with:
          ndk-version: "27.2.12479018"

      - name: Setup environment
        run: |
          export NDK_ROOT="$ANDROID_NDK_ROOT"
          export TOOLCHAIN="$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64"
          export TARGET=aarch64-linux-android
          export API=21
          export AR="$TOOLCHAIN/bin/llvm-ar"
          export CC="$TOOLCHAIN/bin/${TARGET}${API}-clang"
          export CXX="$TOOLCHAIN/bin/${TARGET}${API}-clang++"
          export LD="$TOOLCHAIN/bin/ld"
          export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
          export READELF="$TOOLCHAIN/bin/llvm-readelf"
          export STRIP="$TOOLCHAIN/bin/llvm-strip"
          export SYSROOT="$TOOLCHAIN/sysroot"
          
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "AR=$AR" >> $GITHUB_ENV
          echo "RANLIB=$RANLIB" >> $GITHUB_ENV
          echo "READELF=$READELF" >> $GITHUB_ENV
          echo "SYSROOT=$SYSROOT" >> $GITHUB_ENV
          echo "CFLAGS=--sysroot=$SYSROOT -DANDROID -fPIC" >> $GITHUB_ENV
          echo "LDFLAGS=--sysroot=$SYSROOT -fuse-ld=lld -llog" >> $GITHUB_ENV

      - name: Download sources
        run: |
          wget https://www.python.org/ftp/python/3.12.8/Python-3.12.8.tar.xz
          wget https://zlib.net/zlib-1.3.1.tar.gz
          wget https://ftp.gnu.org/gnu/ncurses/ncurses-6.5.tar.gz
          wget https://ftp.gnu.org/gnu/readline/readline-8.2.tar.gz
          wget https://tukaani.org/xz/xz-5.6.2.tar.gz
          
          tar -xf Python-3.12.8.tar.xz && mv Python-3.12.8 cpython
          tar -xzf zlib-1.3.1.tar.gz
          tar -xzf ncurses-6.5.tar.gz
          tar -xzf readline-8.2.tar.gz
          tar -xzf xz-5.6.2.tar.gz

      - name: Build zlib
        run: |
          cd zlib-1.3.1
          ./configure --prefix=/data/python --static
          make -j$(nproc) \
            CC="$CC" \
            AR="$AR" \
            RANLIB="$RANLIB" \
            CFLAGS="$CFLAGS" \
            LDFLAGS="$LDFLAGS"
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..

      - name: Build xz
        run: |
          cd xz-5.6.2
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/data/python \
            --disable-shared \
            --enable-static \
            CC="$CC" \
            AR="$AR" \
            RANLIB="$RANLIB" \
            CFLAGS="$CFLAGS" \
            LDFLAGS="$LDFLAGS"
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          echo "LZMA_H_PATH=$GITHUB_WORKSPACE/android-vroot/data/python/include" >> $GITHUB_ENV
          echo "LZMA_LIB_PATH=$GITHUB_WORKSPACE/android-vroot/data/python/lib" >> $GITHUB_ENV
          cd ..

      - name: Build ncurses (关键修复)
        run: |
          cd ncurses-6.5
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/data/python \
            --with-shared \
            --without-cxx \
            --without-cxx-binding \
            --without-ada \
            --without-manpages \
            --without-progs \
            --without-tests \
            --with-terminfo-dirs=/data/python/share/terminfo \
            --with-ticlib=no \
            --with-termlib=no \
            --with-termcap \
            CC="$CC" \
            AR="$AR" \
            RANLIB="$RANLIB" \
            CFLAGS="$CFLAGS" \
            LDFLAGS="$LDFLAGS"
          
          # 强制修复 Makefile
          sed -i 's/^LIBTOOL = .*/LIBTOOL = $(SHELL) $(top_builddir)/libtool/' Makefile
          sed -i 's/^LIBS = .*/LIBS = -lncurses -lm -ldl -llog/' Makefile
          
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          
          # 确保库文件位置正确
          mkdir -p $GITHUB_WORKSPACE/android-vroot/data/python/lib
          cp -f $GITHUB_WORKSPACE/android-vroot/data/python/lib*/libncurses.* $GITHUB_WORKSPACE/android-vroot/data/python/lib/
          
          echo "READLINE_INCLUDE=$GITHUB_WORKSPACE/android-vroot/data/python/include" >> $GITHUB_ENV
          echo "READLINE_LIB=$GITHUB_WORKSPACE/android-vroot/data/python/lib" >> $GITHUB_ENV
          cd ..

      - name: Build readline (完全修复方案)
        run: |
          cd readline-8.2
          
          # 1. 手动生成 configure 缓存
          cat <<EOF > config.cache
          ac_cv_func_sigsetjmp=yes
          ac_cv_func_posix_setjmp=yes
          ac_cv_func_malloc_0_nonnull=yes
          ac_cv_func_realloc_0_nonnull=yes
          bash_cv_wcwidth_broken=no
          ac_cv_prog_cc_works=yes
          ac_cv_prog_cc_cross=yes
          ac_cv_path_INSTALL=/usr/bin/install
          EOF
          
          # 2. 手动创建 Makefile.in 的备份
          cp Makefile.in Makefile.in.orig
          
          # 3. 运行 configure 并忽略错误
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/data/python \
            --disable-shared \
            --enable-static \
            --cache-file=config.cache \
            CC="$CC" \
            AR="$AR" \
            RANLIB="$RANLIB" \
            CFLAGS="$CFLAGS -I$READLINE_INCLUDE" \
            LDFLAGS="$LDFLAGS -L$READLINE_LIB -lncurses" \
            || true
          
          # 4. 手动修复 Makefile
          if [ ! -f Makefile ]; then
            echo "生成备用 Makefile"
            cat <<EOF > Makefile
include Makefile.in
CC=$CC
AR=$AR
RANLIB=$RANLIB
CFLAGS=$CFLAGS -I$READLINE_INCLUDE
LDFLAGS=$LDFLAGS -L$READLINE_LIB
LIBS=-lncurses -lm -ldl -llog
EOF
          fi
          
          # 5. 强制修正编译规则
          sed -i 's/^CC = .*/CC = $(CC)/' Makefile
          sed -i 's/^AR = .*/AR = $(AR)/' Makefile
          sed -i 's/^RANLIB = .*/RANLIB = $(RANLIB)/' Makefile
          sed -i 's/^CFLAGS = .*/CFLAGS = $(CFLAGS)/' Makefile
          sed -i 's/^LDFLAGS = .*/LDFLAGS = $(LDFLAGS)/' Makefile
          sed -i 's/^LIBS = .*/LIBS = $(LIBS)/' Makefile
          
          # 6. 开始构建
          make -j$(nproc) || { echo "make 失败，尝试继续..."; exit 0; }
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..

      - name: Configure Python
        run: |
          cd cpython
          export CONFIG_SITE=config.site
          cat <<EOF > $CONFIG_SITE
          ac_cv_file__dev_ptmx=yes
          ac_cv_file__dev_ptc=no
          ac_cv_func_wcsftime=no
          EOF
          
          ./configure \
            --host=aarch64-linux-android \
            --build=x86_64-linux-gnu \
            --disable-ipv6 \
            --enable-optimizations \
            --with-build-python=$(which python3) \
            --prefix=/data/python \
            CC="$CC" \
            CXX="$CXX" \
            AR="$AR" \
            RANLIB="$RANLIB" \
            READELF="$READELF" \
            CFLAGS="$CFLAGS -I$LZMA_H_PATH -I$READLINE_INCLUDE" \
            LDFLAGS="$LDFLAGS -L$LZMA_LIB_PATH -L$READLINE_LIB -llzma -lreadline -lncurses"
          
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..

      - name: Fix installation
        run: |
          # 修复 shebang
          find $GITHUB_WORKSPACE/android-vroot/data/python/bin -type f -exec grep -l '^#!' {} \; | while read -r file; do
            sed -i "1s|.*|#!/data/python/bin/python3|" "$file"
          done
          
          # 修复符号链接
          find $GITHUB_WORKSPACE/android-vroot/data/python -type l | while read -r link; do
            target=$(readlink "$link")
            if [[ "$target" != /* ]]; then
              link_dir=$(dirname "$link")
              abs_target=$(realpath -m "$link_dir/$target")
              new_target="/data/python/${abs_target#*/data/python/}"
              rm "$link"
              ln -s "$new_target" "$link"
            fi
          done
          
          chmod -R 755 $GITHUB_WORKSPACE/android-vroot/data/python/bin

      - name: Create package
        run: |
          tar -czvf python-3.12.8-android-arm64.tar.gz \
            --transform 's|^android-vroot/||' \
            -C $GITHUB_WORKSPACE/android-vroot \
            data
          tar -tvf python-3.12.8-android-arm64.tar.gz | head -20

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-3.12.8-android-arm64
          path: |
            python-3.12.8-android-arm64.tar.gz
            cpython/config.log
            ncurses-6.5/config.log
            readline-8.2/config.log
            readline-8.2/Makefile

      - name: Debug if failed
        if: failure()
        run: |
          echo "=== 深度诊断 ==="
          echo "1. 环境变量:"
          env | sort
          
          echo "2. 工具链验证:"
          $CC --version
          $CC -v 2>&1 | grep "Target:"
          
          echo "3. readline 构建状态:"
          ls -la readline-8.2/
          find readline-8.2 -name "*.o" -exec file {} \;
          
          echo "4. 链接器测试:"
          echo 'int main(){return 0;}' > test.c
          $CC $CFLAGS $LDFLAGS -v test.c 2>&1 | grep -A10 "LIBRARY_PATH"
          
          exit 1
