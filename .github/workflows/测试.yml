name: Python Android ARM64 Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 安装构建依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            zlib1g-dev \
            libffi-dev \
            libssl-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            wget \
            curl \
            llvm \
            libncurses5-dev \
            libncursesw5-dev \
            xz-utils \
            tk-dev \
            libxml2-dev \
            libxmlsec1-dev \
            liblzma-dev \
            git \
            tar \
            python3 \
            python3-pip \
            unzip \
            binutils \
            tree

      - name: 设置 Android NDK (r27b)
        uses: android-actions/setup-android@v2
        with:
          ndk-version: "27.2.12479018"

      - name: 验证 NDK 安装
        run: |
          echo "Android NDK 根目录: $ANDROID_NDK_ROOT"
          ls -l $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/
          echo "检查 sysroot"
          ls -l $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/
          echo "检查 clang 版本"
          $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang --version

      - name: 配置交叉编译工具
        run: |
          export READELF=$(which readelf)
          if [ ! -f "$READELF" ]; then
            sudo apt install -y binutils
            export READELF=$(which readelf)
          fi
          echo "READELF=$READELF" >> $GITHUB_ENV
          echo "AR=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "RANLIB=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib" >> $GITHUB_ENV

      - name: 检查 NDK 中的 liblzma
        id: check_liblzma
        run: |
          echo "检查 NDK sysroot 中的 lzma.h"
          LZMA_H=$(find $ANDROID_NDK_ROOT -name lzma.h)
          echo "检查 NDK sysroot 中的 liblzma"
          LZMA_LIB=$(find $ANDROID_NDK_ROOT -name liblzma.a -o -name liblzma.so)
          if [ -n "$LZMA_H" ] && [ -n "$LZMA_LIB" ]; then
            echo "NDK 提供 liblzma"
            echo "LZMA_H_PATH=$(dirname $LZMA_H)" >> $GITHUB_ENV
            echo "LZMA_LIB_PATH=$(dirname $LZMA_LIB)" >> $GITHUB_ENV
            echo "USE_NDK_LZMA=true" >> $GITHUB_ENV
          else
            echo "NDK 未提供 liblzma，将交叉编译 xz"
            echo "USE_NDK_LZMA=false" >> $GITHUB_ENV
          fi

      - name: 下载 Python 3.12.8 源码
        run: |
          wget https://www.python.org/ftp/python/3.12.8/Python-3.12.8.tar.xz
          tar -xf Python-3.12.8.tar.xz
          mv Python-3.12.8 cpython

      - name: 下载 zlib 源码
        run: |
          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar -xzf zlib-1.3.1.tar.gz

      - name: 下载并交叉编译 xz（如果 NDK 未提供 liblzma）
        if: env.USE_NDK_LZMA == 'false'
        run: |
          wget https://tukaani.org/xz/xz-5.6.2.tar.gz
          tar -xzf xz-5.6.2.tar.gz
          cd xz-5.6.2
          export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          export AR=$AR
          export RANLIB=$RANLIB
          export SYSROOT=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/data/python \
            --disable-shared \
            --enable-static \
            CFLAGS="--sysroot=$SYSROOT -DANDROID" \
            LDFLAGS="--sysroot=$SYSROOT -fuse-ld=lld"
          make -j$(nproc) || { echo "make 失败"; cat config.log; exit 1; }
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..
          echo "LZMA_H_PATH=$GITHUB_WORKSPACE/android-vroot/data/python/include" >> $GITHUB_ENV
          echo "LZMA_LIB_PATH=$GITHUB_WORKSPACE/android-vroot/data/python/lib" >> $GITHUB_ENV

      - name: 下载并交叉编译 ncurses
        run: |
          wget https://ftp.gnu.org/gnu/ncurses/ncurses-6.5.tar.gz
          tar -xzf ncurses-6.5.tar.gz
          cd ncurses-6.5
          export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          export AR=$AR
          export RANLIB=$RANLIB
          export SYSROOT=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/data/python \
            --disable-shared \
            --enable-static \
            --enable-widec \
            --without-cxx \
            --without-cxx-binding \
            --without-ada \
            --without-manpages \
            --without-progs \
            --without-tests \
            CFLAGS="--sysroot=$SYSROOT -DANDROID" \
            LDFLAGS="--sysroot=$SYSROOT -fuse-ld=lld" \
            > configure.log 2>&1 || { echo "configure 失败"; cat configure.log; exit 1; }
          make -j$(nproc) > make.log 2>&1 || { echo "make 失败"; cat make.log; exit 1; }
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot > install.log 2>&1 || { echo "make install 失败"; cat install.log; exit 1; }
          # 确保库文件在正确位置
          mkdir -p $GITHUB_WORKSPACE/android-vroot/data/python/lib
          find $GITHUB_WORKSPACE/android-vroot -name "libncursesw.a" -exec cp {} $GITHUB_WORKSPACE/android-vroot/data/python/lib/ \;
          cd ..
          echo "NCURSES_LIB=$GITHUB_WORKSPACE/android-vroot/data/python/lib" >> $GITHUB_ENV

      - name: 下载并交叉编译 readline
        run: |
          wget https://ftp.gnu.org/gnu/readline/readline-8.2.tar.gz
          tar -xzf readline-8.2.tar.gz
          cd readline-8.2
          export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          export AR=$AR
          export RANLIB=$RANLIB
          export SYSROOT=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/data/python \
            --disable-shared \
            --enable-static \
            bash_cv_wcwidth_broken=no \
            CFLAGS="-I$GITHUB_WORKSPACE/android-vroot/data/python/include --sysroot=$SYSROOT -DANDROID" \
            LDFLAGS="-L$GITHUB_WORKSPACE/android-vroot/data/python/lib -lncursesw --sysroot=$SYSROOT -fuse-ld=lld"
          make -j$(nproc) || { echo "make 失败"; cat config.log; exit 1; }
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..
          echo "READLINE_INCLUDE=$GITHUB_WORKSPACE/android-vroot/data/python/include" >> $GITHUB_ENV
          echo "READLINE_LIB=$GITHUB_WORKSPACE/android-vroot/data/python/lib" >> $GITHUB_ENV

      - name: 构建 zlib
        run: |
          cd zlib-1.3.1
          export CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          export AR=$AR
          export RANLIB=$RANLIB
          export SYSROOT=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          export CFLAGS="--sysroot=$SYSROOT -DANDROID"
          export LDFLAGS="--sysroot=$SYSROOT -fuse-ld=lld"
          ./configure \
            --prefix=/data/python \
            --static
          make -j$(nproc) || { echo "make 失败"; cat config.log; exit 1; }
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot

      - name: 为 Android 配置 Python
        run: |
          cd cpython
          # 禁用不兼容的模块
          echo "禁用不兼容的 Android 模块"
          for module in grp pwd spwd; do
            sed -i "/^$module /s/^/#/" Modules/Setup
            sed -i "/^${module}module.c/s/^/#/" Modules/Setup
          done

          # 创建 config.site 文件
          export CONFIG_SITE=config.site
          cat <<EOF > $CONFIG_SITE
          ac_cv_file__dev_ptmx=yes
          ac_cv_file__dev_ptc=no
          ac_cv_func_getgrent=no
          ac_cv_func_setgrent=no
          ac_cv_func_endgrent=no
          ac_cv_func_getpwent=no
          ac_cv_func_setpwent=no
          ac_cv_func_endpwent=no
          EOF

          # 运行 configure
          export SYSROOT=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          ./configure \
            --host=aarch64-linux-android \
            --build=x86_64-linux-gnu \
            --disable-ipv6 \
            --enable-optimizations \
            --with-build-python=$(which python3) \
            CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang \
            CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++ \
            AR=$AR \
            RANLIB=$RANLIB \
            READELF=$READELF \
            --prefix=/data/python \
            CFLAGS="-I${LZMA_H_PATH} -I$GITHUB_WORKSPACE/android-vroot/data/python/include -I${READLINE_INCLUDE} --sysroot=$SYSROOT -DANDROID" \
            LDFLAGS="-L${LZMA_LIB_PATH} -L$GITHUB_WORKSPACE/android-vroot/data/python/lib -llzma -L${READLINE_LIB} -lreadline -lncursesw -lc -lm -ldl --sysroot=$SYSROOT -fuse-ld=lld" \
            2>&1 | tee configure.log || { echo "configure 失败"; cat configure.log; exit 1; }

      - name: 构建 Python
        run: |
          cd cpython
          make -j$(nproc) || { echo "make 失败"; exit 1; }

      - name: 安装到虚拟文件系统
        run: |
          mkdir -p $GITHUB_WORKSPACE/android-vroot/data
          cd cpython
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          # 修复 shebang
          find $GITHUB_WORKSPACE/android-vroot/data/python/bin -type f -exec grep -l '^#!' {} \; | while read -r file; do
            sed -i "1s|.*|#!/data/python/bin/python3|" "$file"
          done

      - name: 创建部署包
        run: |
          tar -czvf python-3.12.8-android-arm64.tar.gz \
            --transform 's|^android-vroot/||' \
            -C $GITHUB_WORKSPACE/android-vroot \
            data
          # 验证打包内容
          tar -tvf python-3.12.8-android-arm64.tar.gz | head -20

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: python-3.12.8-android-arm64
          path: |
            python-3.12.8-android-arm64.tar.gz
            *.tar.gz
            *.tar.xz
