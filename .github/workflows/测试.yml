name: 测试

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 安装构建依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            zlib1g-dev \
            libffi-dev \
            libssl-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            wget \
            curl \
            llvm \
            libncurses5-dev \
            libncursesw5-dev \
            xz-utils \
            tk-dev \
            libxml2-dev \
            libxmlsec1-dev \
            liblzma-dev \
            git \
            tar \
            python3 \
            python3-pip \
            unzip \
            binutils \
            tree

      - name: 设置 Android NDK (r27b)
        uses: android-actions/setup-android@v2
        with:
          ndk-version: "27.2.12479018"

      - name: 验证 NDK 安装
        run: |
          echo "Android NDK 根目录: $ANDROID_NDK_ROOT"
          ls -l $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/

      - name: 配置交叉编译工具
        run: |
          export READELF=$(which readelf)
          if [ ! -f "$READELF" ]; then
            sudo apt install -y binutils
            export READELF=$(which readelf)
          fi
          echo "READELF=$READELF" >> $GITHUB_ENV
          echo "AR=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "RANLIB=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib" >> $GITHUB_ENV

      - name: 下载 Python 3.12.8 源码
        run: |
          wget https://www.python.org/ftp/python/3.12.8/Python-3.12.8.tar.xz
          tar -xf Python-3.12.8.tar.xz
          mv Python-3.12.8 cpython

      - name: 下载 zlib 源码
        run: |
          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar -xzf zlib-1.3.1.tar.gz

      - name: 为 Android 配置 Python
        run: |
          cd cpython
          export CONFIG_SITE=config.site
          cat <<EOF > $CONFIG_SITE
          ac_cv_file__dev_ptmx=yes
          ac_cv_file__dev_ptc=no
          EOF

          ./configure \
            --host=aarch64-linux-android \
            --build=x86_64-linux-gnu \
            --disable-ipv6 \
            --enable-optimizations \
            --with-build-python=$(which python3) \
            CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang \
            CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++ \
            AR=$AR \
            RANLIB=$RANLIB \
            READELF=$READELF \
            --prefix=/data/python

      - name: 构建 Python
        run: |
          cd cpython
          make -j$(nproc)

      - name: 构建 zlib
        run: |
          cd zlib-1.3.1
          ./configure --prefix=/data/python
          make -j$(nproc)

      - name: 创建虚拟 Android 文件系统
        run: |
          # 创建虚拟 Android 根目录
          mkdir -p android-vroot/data

          # 安装 Python 到虚拟 /data/python
          cd cpython
          make install DESTDIR=../android-vroot

          # 安装 zlib 到相同位置
          cd ../zlib-1.3.1
          make install DESTDIR=../android-vroot

      - name: 修复路径和权限
        run: |
          # 修复 shebang 行
          find android-vroot/data/python/bin -type f -exec grep -l '^#!' {} \; | while read -r file; do
            sed -i "1s|.*|#!/data/python/bin/python3|" "$file"
          done

          # 修复符号链接为绝对路径
          find android-vroot/data/python -type l | while read -r link; do
            target=$(readlink "$link")
            if [[ "$target" != /* ]]; then
              # 将相对路径转换为绝对路径
              link_dir=$(dirname "$link")
              abs_target=$(realpath -m "$link_dir/$target")
              new_target="/data/python/${abs_target#*/data/python/}"
              rm "$link"
              ln -s "$new_target" "$link"
            fi
          done

          # 设置可执行权限
          find android-vroot/data/python/bin -type f -exec chmod 755 {} \;

          # 验证目录结构
          tree -L 3 android-vroot/

      - name: 创建部署包
        run: |
          # 创建包含正确 Android 路径的 tarball
          tar -czvf python-3.12.8-android-arm64.tar.gz \
            --transform 's|^android-vroot/||' \
            -C android-vroot \
            data

          # 显示包内容
          tar -tvf python-3.12.8-android-arm64.tar.gz | head -20

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: python-3.12.8-android-arm64
          path: |
            python-3.12.8-android-arm64.tar.gz
            Python-3.12.8.tar.xz
            zlib-1.3.1.tar.gz