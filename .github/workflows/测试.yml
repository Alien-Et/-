name: Build Python for Android (aarch64)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 安装构建依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            wget \
            curl \
            git \
            tar \
            unzip \
            tree \
            python3 \
            python3-pip \
            pkg-config \
            autoconf \
            automake \
            libtool \
            texinfo

      - name: 设置 Android NDK (r27b)
        uses: android-actions/setup-android@v2
        with:
          ndk-version: "27.2.12479018"

      - name: 验证 NDK 安装
        run: |
          echo "Android NDK 根目录: $ANDROID_NDK_ROOT"
          ls -l $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/
          echo "检查 sysroot"
          ls -l $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/
          echo "检查 clang 版本"
          $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang --version

      - name: 配置交叉编译工具
        run: |
          export READELF=$(which readelf)
          if [ ! -f "$READELF" ]; then
            sudo apt install -y binutils
            export READELF=$(which readelf)
          fi
          echo "READELF=$READELF" >> $GITHUB_ENV
          echo "AR=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "RANLIB=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib" >> $GITHUB_ENV
          echo "CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++" >> $GITHUB_ENV
          echo "SYSROOT=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot" >> $GITHUB_ENV

      - name: 检查 NDK 中的 liblzma
        id: check_liblzma
        run: |
          echo "检查 NDK sysroot 中的 lzma.h"
          LZMA_H=$(find $ANDROID_NDK_ROOT -name lzma.h)
          echo "检查 NDK sysroot 中的 liblzma"
          LZMA_LIB=$(find $ANDROID_NDK_ROOT -name liblzma.a -o -name liblzma.so)
          if [ -n "$LZMA_H" ] && [ -n "$LZMA_LIB" ]; then
            echo "NDK 提供 liblzma"
            echo "LZMA_H_PATH=$(dirname $LZMA_H)" >> $GITHUB_ENV
            echo "LZMA_LIB_PATH=$(dirname $LZMA_LIB)" >> $GITHUB_ENV
            echo "USE_NDK_LZMA=true" >> $GITHUB_ENV
          else
            echo "NDK 未提供 liblzma，将交叉编译 xz"
            echo "USE_NDK_LZMA=false" >> $GITHUB_ENV
          fi

      - name: 下载 Python 3.12.8 源码
        run: |
          wget https://www.python.org/ftp/python/3.12.8/Python-3.12.8.tar.xz
          tar -xf Python-3.12.8.tar.xz
          mv Python-3.12.8 cpython

      - name: 下载 zlib 源码
        run: |
          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar -xzf zlib-1.3.1.tar.gz

      - name: 下载并交叉编译 ncurses
        run: |
          wget https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.4.tar.gz
          tar -xzf ncurses-6.4.tar.gz
          cd ncurses-6.4
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/data/python \
            --without-shared \
            --enable-static \
            --without-debug \
            --without-ada \
            --without-manpages \
            --disable-db-install \
            --without-tests \
            --with-termlib \
            CC=$CC \
            AR=$AR \
            RANLIB=$RANLIB \
            CFLAGS="--sysroot=$SYSROOT -DANDROID"
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..
          echo "NCURSES_INCLUDE=$GITHUB_WORKSPACE/android-vroot/data/python/include" >> $GITHUB_ENV
          echo "NCURSES_LIB=$GITHUB_WORKSPACE/android-vroot/data/python/lib" >> $GITHUB_ENV

      - name: 下载并交叉编译 readline
        run: |
          wget https://ftp.gnu.org/gnu/readline/readline-8.2.tar.gz
          tar -xzf readline-8.2.tar.gz
          cd readline-8.2
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/data/python \
            --disable-shared \
            --enable-static \
            bash_cv_wcwidth_broken=no \
            CC=$CC \
            AR=$AR \
            RANLIB=$RANLIB \
            CFLAGS="--sysroot=$SYSROOT -DANDROID -I${NCURSES_INCLUDE}" \
            LDFLAGS="-L${NCURSES_LIB}"
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..
          echo "READLINE_INCLUDE=$GITHUB_WORKSPACE/android-vroot/data/python/include" >> $GITHUB_ENV
          echo "READLINE_LIB=$GITHUB_WORKSPACE/android-vroot/data/python/lib" >> $GITHUB_ENV

      - name: 下载并交叉编译 xz（如果 NDK 未提供 liblzma）
        if: env.USE_NDK_LZMA == 'false'
        run: |
          wget https://tukaani.org/xz/xz-5.6.2.tar.gz
          tar -xzf xz-5.6.2.tar.gz
          cd xz-5.6.2
          ./configure \
            --host=aarch64-linux-android \
            --prefix=/data/python \
            --disable-shared \
            --enable-static \
            CC=$CC \
            CXX=$CXX \
            AR=$AR \
            RANLIB=$RANLIB \
            CFLAGS="--sysroot=$SYSROOT -DANDROID"
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ..
          echo "LZMA_H_PATH=$GITHUB_WORKSPACE/android-vroot/data/python/include" >> $GITHUB_ENV
          echo "LZMA_LIB_PATH=$GITHUB_WORKSPACE/android-vroot/data/python/lib" >> $GITHUB_ENV

      - name: 构建 zlib
        run: |
          cd zlib-1.3.1
          CC=$CC \
          AR=$AR \
          RANLIB=$RANLIB \
          ./configure \
            --prefix=/data/python \
            --static
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          echo "ZLIB_INCLUDE=$GITHUB_WORKSPACE/android-vroot/data/python/include" >> $GITHUB_ENV
          echo "ZLIB_LIB=$GITHUB_WORKSPACE/android-vroot/data/python/lib" >> $GITHUB_ENV

      - name: 检查所有依赖库
        run: |
          echo "检查 ncurses 库"
          ls -l ${NCURSES_LIB}/libncurses.a
          echo "检查 readline 库"
          ls -l ${READLINE_LIB}/libreadline.a
          echo "检查 zlib 库"
          ls -l ${ZLIB_LIB}/libz.a
          if [ "${{ env.USE_NDK_LZMA }}" == "false" ]; then
            echo "检查 lzma 库"
            ls -l ${LZMA_LIB_PATH}/liblzma.a
          fi

      - name: 为 Android 配置 Python
        run: |
          cd cpython
          export CONFIG_SITE=config.site
          cat <<EOF > $CONFIG_SITE
          ac_cv_file__dev_ptmx=yes
          ac_cv_file__dev_ptc=no
          EOF
          
          # 准备编译参数
          COMMON_CFLAGS="-I${ZLIB_INCLUDE} -I${READLINE_INCLUDE} -I${NCURSES_INCLUDE} --sysroot=$SYSROOT -DANDROID"
          COMMON_LDFLAGS="-L${ZLIB_LIB} -L${READLINE_LIB} -L${NCURSES_LIB} -lreadline -lncurses -lz --sysroot=$SYSROOT -fuse-ld=lld"
          
          if [ "${{ env.USE_NDK_LZMA }}" == "false" ]; then
            COMMON_CFLAGS="-I${LZMA_H_PATH} $COMMON_CFLAGS"
            COMMON_LDFLAGS="-L${LZMA_LIB_PATH} -llzma $COMMON_LDFLAGS"
          fi
          
          ./configure \
            --host=aarch64-linux-android \
            --build=x86_64-linux-gnu \
            --disable-ipv6 \
            --enable-optimizations \
            --with-build-python=$(which python3) \
            CC=$CC \
            CXX=$CXX \
            AR=$AR \
            RANLIB=$RANLIB \
            READELF=$READELF \
            --prefix=/data/python \
            CFLAGS="$COMMON_CFLAGS" \
            LDFLAGS="$COMMON_LDFLAGS" \
            --with-ensurepip=no

      - name: 上传 config.log（如果配置失败）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: config-log
          path: cpython/config.log

      - name: 构建 Python
        run: |
          cd cpython
          make -j$(nproc)

      - name: 安装到虚拟 Android 文件系统
        run: |
          mkdir -p $GITHUB_WORKSPACE/android-vroot/data
          cd cpython
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ../zlib-1.3.1
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ../readline-8.2
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          cd ../ncurses-6.4
          make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          if [ "${{ env.USE_NDK_LZMA }}" == "false" ]; then
            cd ../xz-5.6.2
            make install DESTDIR=$GITHUB_WORKSPACE/android-vroot
          fi

      - name: 修复路径和权限
        run: |
          find $GITHUB_WORKSPACE/android-vroot/data/python/bin -type f -exec grep -l '^#!' {} \; | while read -r file; do
            sed -i "1s|.*|#!/data/python/bin/python3|" "$file"
          done
          find $GITHUB_WORKSPACE/android-vroot/data/python -type l | while read -r link; do
            target=$(readlink "$link")
            if [[ "$target" != /* ]]; then
              link_dir=$(dirname "$link")
              abs_target=$(realpath -m "$link_dir/$target")
              new_target="/data/python/${abs_target#*/data/python/}"
              rm "$link"
              ln -s "$new_target" "$link"
            fi
          done
          find $GITHUB_WORKSPACE/android-vroot/data/python/bin -type f -exec chmod 755 {} \;
          tree -L 3 $GITHUB_WORKSPACE/android-vroot/

      - name: 创建部署包
        run: |
          tar -czvf python-3.12.8-android-arm64.tar.gz \
            --transform 's|^android-vroot/||' \
            -C $GITHUB_WORKSPACE/android-vroot \
            data
          tar -tvf python-3.12.8-android-arm64.tar.gz | head -20

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: python-3.12.8-android-arm64
          path: |
            python-3.12.8-android-arm64.tar.gz
            Python-3.12.8.tar.xz
            zlib-1.3.1.tar.gz
            xz-5.6.2.tar.gz
            readline-8.2.tar.gz
            ncurses-6.4.tar.gz
